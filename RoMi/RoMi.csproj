<Project Sdk="Uno.Sdk">
  <!-- Basic settings -->
  <PropertyGroup>
    <ApplicationTitle>RoMi</ApplicationTitle>
    <ApplicationId>com.DrHardReset.RoMi</ApplicationId>
    <ApplicationPublisher>DrHardReset</ApplicationPublisher>
    <Description>RoMi: Calculates SysEx MIDI messages for Roland Keyboards.</Description>
	  <OutputType>Exe</OutputType>
    <UnoSingleProject>true</UnoSingleProject>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFrameworks Condition="'$(Configuration)'!='Test'">net8.0-android;net8.0-ios;net8.0-desktop;net8.0-maccatalyst;net8.0-windows10.0.19041;net8.0</TargetFrameworks>
    <TargetFrameworks Condition="'$(Configuration)'=='Test'">net8.0</TargetFrameworks>
    <Platforms>AnyCPU;x64</Platforms>
    <Configurations>Debug;Release;Test</Configurations>

    <!-- Do not autogenerate AssemblyInfo as github workflow will set the version number in the static AssemblyInfo.cs automatically. -->
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>

    <!--
      If you encounter this error message:

        error NETSDK1148: A referenced assembly was compiled using a newer version of Microsoft.Windows.SDK.NET.dll.
        Please update to a newer .NET SDK in order to reference this assembly.

      This means that the two packages below must be aligned with the "build" version number of
      the "Microsoft.Windows.SDK.BuildTools" package above, and the "revision" version number
      must be the highest found in https://www.nuget.org/packages/Microsoft.Windows.SDK.NET.Ref.
    -->
    <WindowsSdkPackageVersion>10.0.19041.57</WindowsSdkPackageVersion>

    <!--
      UnoFeatures let's you quickly add and manage implicit package references based on the features you want to use.
      https://aka.platform.uno/singleproject-features
    -->
    <UnoFeatures>
      Material;
      Dsp;
      Toolkit;
      Logging;
      Mvvm;
      Configuration;
      Http;
      Localization;
      Navigation;
      ThemeService;
      SkiaRenderer;
    </UnoFeatures>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|net8.0-android|AnyCPU'">
    <AndroidCreatePackagePerAbi>False</AndroidCreatePackagePerAbi>
    <AndroidKeyStore>False</AndroidKeyStore>
    <AndroidUseAapt2>True</AndroidUseAapt2>
    <AndroidPackageFormat>apk</AndroidPackageFormat>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|net8.0-android|AnyCPU'">
    <AndroidCreatePackagePerAbi>False</AndroidCreatePackagePerAbi>
    <AndroidPackageFormat>apk</AndroidPackageFormat>
    <AndroidKeyStore>False</AndroidKeyStore>
    <AndroidLinkTool>r8</AndroidLinkTool>
    <AndroidUseAapt2>True</AndroidUseAapt2>
  </PropertyGroup>

   <!--
    Differentiation of CommunityToolkit.WinUI.UI is needed for "IncrementalLoadingCollection" in MidiView.
    Don't forget to add specific Version-Numbers in Directory.Packages.props.
  -->
  <ItemGroup Condition="$(TargetFramework.Contains('windows10'))">
    <PackageReference Include="CommunityToolkit.WinUI.UI" />
  </ItemGroup>
  <ItemGroup Condition="!$(TargetFramework.Contains('windows10'))">
    <PackageReference Include="Uno.CommunityToolkit.WinUI.UI" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="managed-midi" />
    <PackageReference Include="PdfPig" />
  </ItemGroup>
  
  <ItemGroup>
    <None Remove="Assets\LibraryDependencyReport.json" />
  </ItemGroup>
  
  <ItemGroup>
    <EmbeddedResource Include="Assets\LibraryDependencyReport.json" />
  </ItemGroup>
  
  <ItemGroup>
    <ProjectCapability Include="Maui" />
  </ItemGroup>

  <!-- Only create the library dependency report once for all platforms directly after restoring nuget packages.
       Unfortunatelly the targets for building in VS and dotnet build seem to differ.
       That is why I defined two targets. -->
  <Target Name="CreateLibraryDependencyReport_VisualStudio" BeforeTargets="DispatchToInnerBuilds">
    <Exec Command="powershell.exe -NoLogo -NonInteractive -executionpolicy Unrestricted &quot;&amp; '.\createLibraryDependencyReport.ps1' '$(SolutionDir)' '$(MSBuildProjectDirectory)\Assets\LibraryDependencyReport.json'&quot;" />
  </Target>

  <Target Name="CreateLibraryDependencyReport_DotnetBuild" AfterTargets="Restore">
     <!--dotnet build works with "$(ProjectDir)..\" instead of "$(SolutionDir)"-->
    <Exec Command="powershell.exe -NoLogo -NonInteractive -executionpolicy Unrestricted &quot;&amp; '.\createLibraryDependencyReport.ps1' '$(ProjectDir)..\' '$(MSBuildProjectDirectory)\Assets\LibraryDependencyReport.json'&quot;" />
  </Target>

  <Import Project="build/Warnings.targets" />

</Project>
